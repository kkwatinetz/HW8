
//unit8.hw
//Group members: Katie Kwatinetz, Lanaiya Walters, Jimmy Winchester




#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

struct employee
{
    int id;
    char name[50];
    float salary;
    int numberOfDependents;
    struct employee *next;
    struct employee *below;
};

//----------------------- FUNCTION PROTOTYPES ---------------------------

//0.
int getId(char *name);
/*
returns the sum of the ascii codes of the letters of name.
*/

//1.
void printEmployee(struct employee e);
/*
prints an employee in the format [id,name,net salary], where:
Net salary = salary*0.91 + (numberOfDependents *0.01*salary)
Examples: [562,AaBc xYz,1253.56] [562,bAac ZyX,6253.06]
*/

//2.
void printAllEmployees(struct employee *list);
/*
prints all employees in the list. Loops through list and calls
printEmployee for each employee in list
*/

//3.
struct employee *addEmployee(struct employee *list, struct employee e);
/*
adds e to list.
*/

//4.
int searchEmployee(struct employee *list, char *name);
/*
returns 1 if name is found in list. Otherwise, it returns 0
*/

//5.
float highestNetSalary(struct employee *list);
/*
returns the highest net salary.
*/

//----------------------- FUNCTION DEFINITIONS ---------------------------
//0.
int getId(char *name)
{
    int total = 0;
    int i;

    for (i = 0; name[i] != '\0'; i++)
    {
        if (name[i] == ' ' || (name[i] >= 'A' && name[i] <= 'Z'))
        {
            total += name[i];
        }
        else if (name[i] >= 'a' && name[i] <= 'z')
        {
            total += toupper(name[i]);
        }
    }

    return total;
}

//1.
void printEmployee(struct employee e)
{
    printf("[%d, %s, %.2f]\n", e.id, e.name, e.salary * 0.91 + (e.numberOfDependents * 0.01 * e.salary));
}

//2.
void printAllEmployees(struct employee *list)
{
    while (list != NULL)
    {
        struct employee *vertical = list;
        while (vertical != NULL)
        {
            printEmployee(*vertical);
            vertical = vertical->below;
        }
        list = list->next;
    }
}

//3.
struct employee *addEmployee(struct employee *list, struct employee e)
{
    struct employee *newEmployee = (struct employee *)malloc(sizeof(struct employee));
    *newEmployee = e;
    newEmployee->next = newEmployee->below = NULL;

    if (list == NULL)
    {
        return newEmployee; // First employee
    }

    struct employee *current = list;

    while (current)
    {
        if (current->id == e.id)
        {
            // Add vertically
            struct employee *vertical = current;
            while (vertical->below != NULL)
            {
                // Prevent duplicate addition in the vertical chain
                if (vertical->id == e.id)
                {
                    free(newEmployee);
                    return list;
                }
                vertical = vertical->below;
            }
            vertical->below = newEmployee;
            return list;
        }
        if (current->next == NULL)
        {
            break;
        }
        current = current->next;
    }
    // Add horizontally
    current->next = newEmployee;
    return list;
}

//4.
int searchEmployee(struct employee *list, char *name)
{
    struct employee *current = list;

    while (current)
    {
        struct employee *vertical = current;
        while (vertical)
        {
            if (strcmp(vertical->name, name) == 0)
            {
                printf("Found\n");
                return 1;
            }
            vertical = vertical->below;
        }
        current = current->next;
    }

    printf("Not Found\n");
    return 0;
}

//5.
float highestNetSalary(struct employee *list)
{
    struct employee *current = list;
    float maxNetSalary = 0.0;

    while (current != NULL)
    {
        struct employee *vertical = current;
        while (vertical != NULL)
        {
            float netSalary = vertical->salary * 0.91 + (vertical->numberOfDependents * 0.01 * vertical->salary);
            if (netSalary > maxNetSalary)
            {
                maxNetSalary = netSalary;
            }
            vertical = vertical->below;
        }
        current = current->next;
    }

    return maxNetSalary;
}

//DO NOT CHANGE ANYTHING IN main!!!!!!
int main()
{
    struct employee *company = NULL, tempEmployee;
    int tempInt = 0;
    char tempName[50] = "Allal Kamch";
    char dummy;

    printf("Enter 1 to add a new employee, 0 to stop: ");
    scanf("%d", &tempInt);

    while (tempInt == 1)
    {
        printf("Enter Full Name: ");
        scanf("%c", &dummy);
        fgets(tempEmployee.name, 50, stdin);
        if (tempEmployee.name[strlen(tempEmployee.name) - 1] == '\n')
        {
            tempEmployee.name[strlen(tempEmployee.name) - 1] = '\0';
        }
        tempEmployee.id = getId(tempEmployee.name);
        printf("Enter salary-numberOfDependents: ");
        scanf("%f-%d", &tempEmployee.salary, &tempEmployee.numberOfDependents);
        company = addEmployee(company, tempEmployee);
        printf("Enter 1 to add a new employee, 0 to stop: ");
        scanf("%d", &tempInt);
    }

    printAllEmployees(company);

    printf("Highest Net Salary = %.2f\n", highestNetSalary(company));

    tempInt = searchEmployee(company, tempName);

    if (tempInt == 1)
    {
        printf("%s is found!\n", tempName);
    }
    else
    {
        printf("%s is NOT found!\n", tempName);
    }

    return 0;
}
