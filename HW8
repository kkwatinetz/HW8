
//unit8.hw
//Group members: Katie Kwatinetz, Lanaiya Walters, Jimmy Winchester

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct employee
{
    int id;
    char name[50];
    float salary;
    int numberOfDependents;
    //---------------------
    struct employee * next;
    struct employee * below;
};

//----------------------- FUNCTION PROTOTYPES ---------------------------

//0.
int getId ( char * name);
/*
returns the sum of the ascii codes of the letters of name.
*/

//1.
void printEmployee ( struct employee e);
/*
prints an employee in the format [id,name,net salary], where:
Net salary = salary*0.91 + (numberOfDependent *0.01*salary)
Examples: [562,AaBc xYz,1253.56] [562,bAac ZyX,6253.06]
*/

//2.
void printAllEmployees ( struct employee * list);
/*
prints all employees in the list. Loops through list and calls
printEmployee for each employee in list
*/

//3.
struct employee * addEmployee ( struct employee * list , struct employee e);
/*
adds e to list.
*/

//4.
int searchEmployee ( struct employee * list , char * name);
/*
returns 1 if name is found in list. Otherwise, it returns 0
*/

//5.
float highestNetSalary ( struct employee * list);
/*
returns the highest net salary.
*/

//----------------------- FUNCTION DEFINITIONS ---------------------------
//0.
int getId ( char * name )
{
    int total = 0;
    int i;

    for(i = 0; name[i] != '\0'; i++){
        total += name[i];
    }

    return total;
}

//1.
void printEmployee (struct employee e)
{
    float netSal = e.salary * 0.91 + (e.numberOfDependents * 0.01 * e.salary);
    printf("[%d, %s, %f]", e.id, e.name, netSal);
}

//2.
void printAllEmployees (struct employee * list)
{
    while (list != NULL) {
        printEmployee(*list); // Dereference pointer to pass struct
        list = list->next;    // Move to the next node
    }
}

//3.
struct employee * addEmployee (struct employee * list , struct employee e)
{
    struct employee *newEmployee = (struct employee *)malloc(sizeof(struct employee));
    if (newEmployee == NULL)
    {
        printf("Memory allocation failed.\n");
        return list;
    }

    newEmployee->id = e.id;
    strcpy(newEmployee->name, e.name);
    newEmployee->salary = e.salary;
    newEmployee->numberOfDependents = e.numberOfDependents;
    newEmployee->next = list;

    return newEmployee; // Only one return
}

//4.
int searchEmployee ( struct employee * list , char * name)
{
    struct employee *current = list;

    while (current != NULL)
    {
        if (strcmp(current->name, name) == 0)
        {
            return 1;
        }
        current = current->next;
    }

    return 0;
}

//5.
float highestNetSalary (struct employee * list)
{
    struct employee *current = list;
    float maxNetSalary = 0.0;

    while (current != NULL)
    {
        float netSalary = current->salary * 0.91 + (current->numberOfDependents * 0.01 * current->salary);
        if (netSalary > maxNetSalary)
        {
            maxNetSalary = netSalary;
        }
        current = current->next;
    }

    return maxNetSalary; // Single return
}

//DO NOT CHANGE ANYTHING IN main!!!!!!
int main() {
    struct employee * company = NULL , tempEmployee;
    int tempInt = 0;
    char tempName [50] = "Allal Kamch" ;
    char dummy;

    printf ("Enter 1 to add a new employee, 0 to stop: ");
    scanf ("%d", &tempInt);

    while ( tempInt == 1 )
    {
        printf("Enter Full Name: ");
        scanf("%c",&dummy);
        fgets(tempEmployee.name, 50, stdin);
        tempEmployee.id = getId ( tempEmployee.name );
        printf ("Enter salary-numberOfDependents: ");
        scanf ("%f-%d", &tempEmployee.salary,
        &tempEmployee.numberOfDependents);
        company = addEmployee ( company , tempEmployee );
        printf ("Enter 1 to add a new employee, 0 to stop: ");
        scanf ("%d", &tempInt);
    }

    printAllEmployees ( company ) ;

    printf ("Highest Net Salary = %.2f\n", highestNetSalary(company) );

    tempInt = searchEmployee ( company , tempName) ;

    if ( tempInt == 1 ) printf ("%s is found!\n", tempName);
    else printf ("%s is NOT found!\n", tempName);

    return 0;
}

